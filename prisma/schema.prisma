generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = "" // Отключает shadow database
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userName          String  @default("User")
  email             String? @unique
  password          String?
  role              Role    @default(STUDENT)
  profilePictureUrl String  @default("https://github.com/shadcn.png")
  language          String? // ENUM

  collab CollabUser[]

  Message       Message[]
  HiddenMessage HiddenMessage[]
  Attempt       Attempt[]

  @@map("user")
}

model Collab {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now()) @map("created_at")
  passedAt  DateTime? @map("updated_at")

  name     String?
  language String?
  isPassed Boolean @default(false)
  hash     String  @unique @default("")

  Message Message[]
  user    CollabUser[]

  taskId  Int
  task    Task      @relation(fields: [taskId], references: [id])
  Attempt Attempt[]
}

model CollabUser {
  id Int @id @default(autoincrement())

  userId   Int
  collabId Int

  User   User   @relation(fields: [userId], references: [id])
  Collab Collab @relation(fields: [collabId], references: [id])

  @@unique([userId, collabId]) // Уникальный составной ключ
}

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content          String
  attachments      String  @default("")
  replyToMessageId String  @default("")
  isRead           Boolean @default(false)
  collabId         Int
  collab           Collab  @relation(fields: [collabId], references: [id])

  userId        Int
  user          User            @relation(fields: [userId], references: [id])
  HiddenMessage HiddenMessage[]
}

model HiddenMessage {
  id Int @id @default(autoincrement())

  userId    Int
  messageId Int

  User    User    @relation(fields: [userId], references: [id])
  Message Message @relation(fields: [messageId], references: [id])

  @@unique([userId, messageId]) // Уникальный составной ключ
}

model Task {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  category     Categories
  difficulty   Difficulty
  title        String
  content      String
  isDeleted    Boolean    @default(false)
  testCases    Json?
  initial_data String     @default("")
  author       String     @default("")
  name         String     @default("")

  Collab     Collab[]
  TaskTheory TaskTheory[]
}

model Theory {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  category  Categories
  title     String
  content   String
  isDeleted Boolean    @default(false)

  TaskTheory TaskTheory[]
}

model TaskTheory {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  taskId   Int
  theoryId Int

  Task   Task   @relation(fields: [taskId], references: [id])
  Theory Theory @relation(fields: [theoryId], references: [id])

  @@unique([taskId, theoryId]) // Уникальный составной ключ
}

model Quotes {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  quote  String
  author String
}

model Attempt {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userAnswer String
  isPassed   Boolean @default(false)
  output     Json?

  collabId Int
  collab   Collab @relation(fields: [collabId], references: [id])

  userId Int
  user   User @relation(fields: [userId], references: [id])
}

enum Categories {
  TYPESCRIPT
}

enum Role {
  STUDENT
  ADMIN
}

enum Difficulty {
  JUNIOR
}

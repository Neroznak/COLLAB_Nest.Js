generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userName          String  @default("User")
  email             String? @unique
  password          String?
  role              Role    @default(STUDENT)
  profilePictureUrl String  @default("https://github.com/shadcn.png")
  language          String?

  collab CollabUser[]

  Message Message[]
  Attempt Attempt[]
  Referal Referal[]

  @@map("user")
}

model Collab {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now()) @map("created_at")
  passedAt  DateTime? @map("updated_at")

  name     String?
  language String?
  isPassed Boolean @default(false)
  hash     String  @unique

  Message Message[]
  user    CollabUser[]

  taskId  Int
  task    Task      @relation(fields: [taskId], references: [id])
  Attempt Attempt[]
  Referal Referal[]
}

model CollabUser {
  id Int @id @default(autoincrement())

  userId     Int
  collabHash String

  User   User   @relation(fields: [userId], references: [id])
  Collab Collab @relation(fields: [collabHash], references: [hash])

  @@unique([userId, collabHash]) // Уникальный составной ключ
}

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content          String
  attachments      String  @default("")
  replyToMessageId String  @default("")
  isRead           Boolean @default(false)
  collabHash       String
  isSystemMessage  Boolean @default(false)
  collab           Collab  @relation(fields: [collabHash], references: [hash])

  userId Int
  user   User @relation(fields: [userId], references: [id])
}

model Task {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  category     Categories
  difficulty   Difficulty
  title        String
  content      String
  isDeleted    Boolean    @default(false)
  testCases    Json?
  initial_data String     @default("")
  author       String     @default("")
  name         String     @default("")

  Collab Collab[]
}

model Attempt {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userAnswer    String
  isPassed      Boolean @default(false)
  output        Json?
  executionTime Int     @default(0)
  collabHash    String
  collab        Collab  @relation(fields: [collabHash], references: [hash])

  userId Int
  user   User @relation(fields: [userId], references: [id])
}

model Referal {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  referal String   @unique
  expires DateTime

  collabHash String
  Collab     Collab @relation(fields: [collabHash], references: [hash])

  userId Int
  User   User @relation(fields: [userId], references: [id])
}

enum Categories {
  TYPESCRIPT
}

enum Role {
  STUDENT
  ADMIN
}

enum Difficulty {
  JUNIOR
}
